#!/usr/bin/env bash
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Helper wrapper for building the eVault enclave docker image

MY_NAME="evault-build"
USAGE="\
$MY_NAME
Usage: $(basename "$0") <command>

Commands:

    build   Build the eVault enclave image container. The resulted container
            can be passed to the nitro-cli EIF builder for creating enclave images.

        --tag   <tag_name>      The container name passed to the docker build.
        --token <github_token>  The github token for this user used to fetch
                                assets from github private repositories.

    help    Show this help message
"

cmd_help() {
    echo "$USAGE"
}

# Build the eVault image
cmd_build() {
    
    if [ "$#" -ne 4 ]; then
        die "Invalid arguments. Please use \`$0 help\` for help."
    fi
    
    which docker > /dev/null 2>&1
    ok_or_die "Docker not found. Aborting." \
        "Please make sure you have Docker (http://docker.com) installed" \
        "and properly configured."
    
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            --tag) tag="$2"; shift ;;
            --token) token="$2"; shift ;;
            *) cmd_help; die "Invalid arguments. Please use \`$0 help\` for help.";;
	 	esac
	 	shift
    done

    # Build the eVault image
    docker build -t "$tag" --build-arg USER=$(whoami) --build-arg TOKEN="$token" .
    ok_or_die "Cannot build eVault docker image."
}

# Send a text message to stderr
#
say_err() {
    [ -t 2 ] && [ -n "$TERM" ] \
        && echo "$(tput setaf 1)[$MY_NAME] $*$(tput sgr0)" 1>&2 \
        || echo "[$MY_NAME] $*" 1>&2
}

# Exit with an error message and (optional) code
# Usage: die [-c <error code>] <error message>
#
die() {
    code=1
    [[ "$1" = "-c" ]] && {
        code="$2"
        shift 2
    }
    say_err "$@"
    exit $code
}

# Exit with an error message if the last exit code is not 0
#
ok_or_die() {
    code=$?
    [[ $code -eq 0 ]] || die -c $code "$@"
}

main() {
    cmd="$1"

    if [ -z "$cmd" ]; then
        die "No command provided. Please use \`$0 help\` for help."
    fi

    declare -f "cmd_$1" > /dev/null
    ok_or_die "Unknown command: $1. Please use \`$0 help\` for help."

    cmd_$@
}

main "${@}"
